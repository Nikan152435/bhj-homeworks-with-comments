// Загрузка больших файлов

// Получаем элементы формы и индикатора прогресса из DOM
const form = document.getElementById('form'); // Элемент формы
const progress = document.getElementById('progress'); // Элемент индикатора прогресса

// Добавляем обработчик события "submit" к форме
form.addEventListener('submit', (e) => {
  e.preventDefault(); // Предотвращаем стандартное поведение формы (перезагрузку страницы)

  // Создаем объект FormData для сбора данных формы
  let formData = new FormData(form);

  // Создаем объект XMLHttpRequest для отправки данных на сервер
  let xhr = new XMLHttpRequest();

  // Устанавливаем обработчик события "upload.onprogress" для отслеживания прогресса загрузки
  xhr.upload.onprogress = function(event) {
    progress.value = event.loaded / event.total; // Обновляем значение индикатора прогресса
  };
// устанавливает обработчик события onprogress для объекта xhr.upload, который отслеживает прогресс загрузки данных на сервер. 

//1** xhr.upload.onprogress - это установка обработчика события onprogress для объекта xhr.upload. xhr - это объект XMLHttpRequest,
// который используется для отправки данных на сервер. xhr.upload - это объект, отвечающий за отслеживание прогресса загрузки.

//2** function(event) - это анонимная функция, которая будет вызываться каждый раз, когда происходит событие onprogress.

//3** event - это объект события, который содержит информацию о процессе загрузки.

//4** progress.value - это свойство элемента с идентификатором progress, которое представляет индикатор прогресса. Мы используем его, 
// чтобы получить текущее значение индикатора прогресса и чтобы обновить значение индикатора.

//5** event.loaded - это свойство объекта события event, которое содержит количество переданных (загруженных) байт данных.

//6** event.total - это свойство объекта события event, которое содержит общее количество байт данных, которые должны быть переданы. 
// Это значение обычно указывается в заголовках ответа сервера.

// когда данные отправляются на сервер, этот обработчик события onprogress вызывается, и он обновляет значение индикатора 
// прогресса (progress.value) на основе количества загруженных данных (event.loaded) и общего объема данных (event.total). 
// Это позволяет отображать и обновлять индикатор прогресса в реальном времени, чтобы пользователь мог видеть, насколько 
// была продвинута загрузка данных.
//

  // Открываем POST-запрос на указанный URL
  xhr.open('POST', 'https://students.netoservices.ru/nestjs-backend/upload');

  // Отправляем данные формы на сервер
  xhr.send(formData);
});

// позволяет отправлять данные из формы на сервер с отслеживанием прогресса загрузки, 
// а также обновляя индикатор прогресса в реальном времени.

// 1**Получение элементов из DOM:
// const form = document.getElementById('form') - получает элемент формы с идентификатором 'form'.
// const progress = document.getElementById('progress') - получает элемент индикатора прогресса с идентификатором 'progress'.

//2** Добавление обработчика события "submit" к форме:
// form.addEventListener('submit', (e) => { ... }) - добавляет обработчик события "submit" к элементу формы. Этот обработчик будет выполнен при отправке формы.

//3** Предотвращение стандартного поведения формы:
// e.preventDefault() - внутри обработчика события "submit" вызывается метод preventDefault(), чтобы предотвратить стандартное действие формы, которое в данном случае было бы перезагрузка страницы.

//4** Создание объекта FormData:
// let formData = new FormData(form) - создает объект FormData, который используется для сбора данных из формы. В данном случае, данные формы собираются из элемента form.

//5** Создание объекта XMLHttpRequest:
// let xhr = new XMLHttpRequest() - создает новый объект XMLHttpRequest, который будет использоваться для отправки данных на сервер.

//6** Установка обработчика события "upload.onprogress":
// xhr.upload.onprogress = function(event) { ... } - устанавливает обработчик события "upload.onprogress". Этот обработчик будет вызываться во время передачи данных на сервер и позволяет отслеживать прогресс загрузки.

//7** Обновление значения индикатора прогресса:
// progress.value = event.loaded / event.total - внутри обработчика "upload.onprogress" обновляется значение индикатора прогресса (progress) в зависимости от количества переданных данных (event.loaded) и общего объема данных (event.total).

//8** Открытие POST-запроса:
// xhr.open('POST', 'https://students.netoservices.ru/nestjs-backend/upload') - открывает POST-запрос на указанный URL, где данные будут отправлены на сервер.

//9** Отправка данных на сервер:
// xhr.send(formData) - отправляет данные из объекта FormData на сервер в теле POST-запроса.